

	/*public HTTPResponse(HTTPRequest request, DataOutputStream output, File root, String defaultPage) {
		this.request = request;
		this.output = output;
		this.root = root;
		this.defaultPage = defaultPage;
		headersMap = new HashMap<String, String>();
	}*/
	
	/*	public void generateResposne() throws IOException {
	switch(request.getMethod()) {
	case OPTIONS:
		handleOptionRequest();
		break;
	case TRACE:
		handleTraceRequest();
		break;
	default:
		handleRequest();
	}
}

private void handleRequest() throws IOException {
	String path = request.getPath();
	System.out.println("Path is: " + path);
	File requestedFile = null;
	boolean sendBody = request.getMethod() != Method.HEAD;

	if(path.isEmpty() || path.equals("/")) {
		System.out.println("Default is set to: " + defaultPage);
		generateSpecificResponse(301);
		return;
		//			requestedFile = new File(root.getAbsolutePath() + "\\" + defaultPage);
		//			path = defaultPage;
	} else if(path.equalsIgnoreCase("/params_info.html")) {
		handleParamsInfo(sendBody);
		return;
	} else {
		requestedFile = new File(root.getAbsolutePath() + "\\" + path);
	}

	if(!requestedFile.isFile()) {
		System.out.println("FILE WAS NOT FOUND");
		generateSpecificResponse(404);
		return;
	}

	String fileExtension;
	ContentType type;
	try {
		fileExtension = path.substring(path.lastIndexOf(".") + 1, path.length());
		type = checkFileExtension(fileExtension.toLowerCase());
	} catch(StringIndexOutOfBoundsException e) {
		type = ContentType.OTHER;
		System.out.println("File doesn't have '.' in it");
	}

	System.out.println("Type is: " + type.toString());
	String chunked = request.getHeaders().get("chunked");
	if(chunked != null && chunked.equalsIgnoreCase("yes"))
		sendResponseFile(requestedFile, type, sendBody, true);
	else
		sendResponseFile(requestedFile, type, sendBody, false);
}

private void handleParamsInfo(boolean sendBody) throws IOException {
	String html = buildHtmlPage();
	sendResponse(OK, html, sendBody);
}

private String buildHtmlPage() {
	String html = "<HTML>" +
			"<HEAD><TITLE>Computer networks</TITLE></HEAD>" +
			"<BODY\">" +
			"<table border=\"1\" style=\"width:100%\">";
	HashMap<String, String> paramsMap = request.getParamsMap();
	for(String key : request.getParamsMap().keySet()){
		html +="<tr><td style=\"width:50%\">"+ key +"</td><td >" + paramsMap.get(key) + "</td></tr>";
	}

	html += "</table></BODY></HTML>";
	return html;
}*/

	/*	private ContentType checkFileExtension(String extension) {
	switch(extension) {
	case "bmp":
	case "gif":
	case "png":
	case "jpg":
		return ContentType.PICTURE;
	case "html":
		return ContentType.HTML;
	case "ico":
		return ContentType.ICON;
	default:
		return ContentType.OTHER;
	}
}

private void handleTraceRequest() throws IOException {

	StringBuilder message = new StringBuilder();

	message.append(request.getFirstLine() + CRLF);
	HashMap<String, String> requestHeaders = request.getHeaders();
	for(String key : requestHeaders.keySet()) {
		message.append(key + ": " + requestHeaders.get(key) + CRLF);
	}

	sendResponse(OK, message.toString(), true);
}
private void handleOptionRequest() throws IOException {

	StringBuilder message = new StringBuilder();
	Method[] methodsArr = Method.values();
	for(int i = 0; i < methodsArr.length - 1; i++) {
		message.append(methodsArr[i].toString() + ", ");
	}
	message.append(methodsArr[methodsArr.length - 1].toString());

	headersMap.put("Allow", message.toString());

	sendResponse(OK, "", false);
}*/

	/*	public void generateResposne() throws IOException {
			switch(request.getMethod()) {
			case OPTIONS:
				handleOptionRequest();
				break;
			case TRACE:
				handleTraceRequest();
				break;
			default:
				handleRequest();
			}
		}

		private void handleRequest() throws IOException {
			String path = request.getPath();
			System.out.println("Path is: " + path);
			File requestedFile = null;
			boolean sendBody = request.getMethod() != Method.HEAD;

			if(path.isEmpty() || path.equals("/")) {
				System.out.println("Default is set to: " + defaultPage);
				generateSpecificResponse(301);
				return;
				//			requestedFile = new File(root.getAbsolutePath() + "\\" + defaultPage);
				//			path = defaultPage;
			} else if(path.equalsIgnoreCase("/params_info.html")) {
				handleParamsInfo(sendBody);
				return;
			} else {
				requestedFile = new File(root.getAbsolutePath() + "\\" + path);
			}

			if(!requestedFile.isFile()) {
				System.out.println("FILE WAS NOT FOUND");
				generateSpecificResponse(404);
				return;
			}

			String fileExtension;
			ContentType type;
			try {
				fileExtension = path.substring(path.lastIndexOf(".") + 1, path.length());
				type = checkFileExtension(fileExtension.toLowerCase());
			} catch(StringIndexOutOfBoundsException e) {
				type = ContentType.OTHER;
				System.out.println("File doesn't have '.' in it");
			}

			System.out.println("Type is: " + type.toString());
			String chunked = request.getHeaders().get("chunked");
			if(chunked != null && chunked.equalsIgnoreCase("yes"))
				sendResponseFile(requestedFile, type, sendBody, true);
			else
				sendResponseFile(requestedFile, type, sendBody, false);
		}

		private void handleParamsInfo(boolean sendBody) throws IOException {
			String html = buildHtmlPage();
			sendResponse(OK, html, sendBody);
		}

		private String buildHtmlPage() {
			String html = "<HTML>" +
					"<HEAD><TITLE>Computer networks</TITLE></HEAD>" +
					"<BODY\">" +
					"<table border=\"1\" style=\"width:100%\">";
			HashMap<String, String> paramsMap = request.getParamsMap();
			for(String key : request.getParamsMap().keySet()){
				html +="<tr><td style=\"width:50%\">"+ key +"</td><td >" + paramsMap.get(key) + "</td></tr>";
			}

			html += "</table></BODY></HTML>";
			return html;
		}*/

	/*	private ContentType checkFileExtension(String extension) {
			switch(extension) {
			case "bmp":
			case "gif":
			case "png":
			case "jpg":
				return ContentType.PICTURE;
			case "html":
				return ContentType.HTML;
			case "ico":
				return ContentType.ICON;
			default:
				return ContentType.OTHER;
			}
		}

		private void handleTraceRequest() throws IOException {

			StringBuilder message = new StringBuilder();

			message.append(request.getFirstLine() + CRLF);
			HashMap<String, String> requestHeaders = request.getHeaders();
			for(String key : requestHeaders.keySet()) {
				message.append(key + ": " + requestHeaders.get(key) + CRLF);
			}

			sendResponse(OK, message.toString(), true);
		}
		private void handleOptionRequest() throws IOException {

			StringBuilder message = new StringBuilder();
			Method[] methodsArr = Method.values();
			for(int i = 0; i < methodsArr.length - 1; i++) {
				message.append(methodsArr[i].toString() + ", ");
			}
			message.append(methodsArr[methodsArr.length - 1].toString());

			headersMap.put("Allow", message.toString());

			sendResponse(OK, "", false);
		}

	public void generateResposne() throws IOException {
		switch(request.getMethod()) {
		case OPTIONS:
			handleOptionRequest();
			break;
		case TRACE:
			handleTraceRequest();
			break;
		default:
			handleRequest();
		}
	}

	private void handleRequest() throws IOException {
		String path = request.getPath();
		System.out.println("Path is: " + path);
		File requestedFile = null;
		boolean sendBody = request.getMethod() != Method.HEAD;

		if(path.isEmpty() || path.equals("/")) {
			System.out.println("Default is set to: " + defaultPage);
			generateSpecificResponse(301);
			return;
			//			requestedFile = new File(root.getAbsolutePath() + "\\" + defaultPage);
			//			path = defaultPage;
		} else if(path.equalsIgnoreCase("/params_info.html")) {
			handleParamsInfo(sendBody);
			return;
		} else {
			requestedFile = new File(root.getAbsolutePath() + "\\" + path);
		}

		if(!requestedFile.isFile()) {
			System.out.println("FILE WAS NOT FOUND");
			generateSpecificResponse(404);
			return;
		}

		String fileExtension;
		ContentType type;
		try {
			fileExtension = path.substring(path.lastIndexOf(".") + 1, path.length());
			type = checkFileExtension(fileExtension.toLowerCase());
		} catch(StringIndexOutOfBoundsException e) {
			type = ContentType.OTHER;
			System.out.println("File doesn't have '.' in it");
		}

		System.out.println("Type is: " + type.toString());
		String chunked = request.getHeaders().get("chunked");
		if(chunked != null && chunked.equalsIgnoreCase("yes"))
			sendResponseFile(requestedFile, type, sendBody, true);
		else
			sendResponseFile(requestedFile, type, sendBody, false);
	}

	private void handleParamsInfo(boolean sendBody) throws IOException {
		String html = buildHtmlPage();
		sendResponse(OK, html, sendBody);
	}

	private String buildHtmlPage() {
		String html = "<HTML>" +
				"<HEAD><TITLE>Computer networks</TITLE></HEAD>" +
				"<BODY\">" +
				"<table border=\"1\" style=\"width:100%\">";
		HashMap<String, String> paramsMap = request.getParamsMap();
		for(String key : request.getParamsMap().keySet()){
			html +="<tr><td style=\"width:50%\">"+ key +"</td><td >" + paramsMap.get(key) + "</td></tr>";
		}

		html += "</table></BODY></HTML>";
		return html;
	}*/

	/*	private ContentType checkFileExtension(String extension) {
		switch(extension) {
		case "bmp":
		case "gif":
		case "png":
		case "jpg":
			return ContentType.PICTURE;
		case "html":
			return ContentType.HTML;
		case "ico":
			return ContentType.ICON;
		default:
			return ContentType.OTHER;
		}
	}

	private void handleTraceRequest() throws IOException {

		StringBuilder message = new StringBuilder();

		message.append(request.getFirstLine() + CRLF);
		HashMap<String, String> requestHeaders = request.getHeaders();
		for(String key : requestHeaders.keySet()) {
			message.append(key + ": " + requestHeaders.get(key) + CRLF);
		}

		sendResponse(OK, message.toString(), true);
	}
	private void handleOptionRequest() throws IOException {

		StringBuilder message = new StringBuilder();
		Method[] methodsArr = Method.values();
		for(int i = 0; i < methodsArr.length - 1; i++) {
			message.append(methodsArr[i].toString() + ", ");
		}
		message.append(methodsArr[methodsArr.length - 1].toString());

		headersMap.put("Allow", message.toString());

		sendResponse(OK, "", false);
	}*/